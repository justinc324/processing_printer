.. _use-linedraw:

How to use the ``linedraw.py`` library to vectorise images
==========================================================

The ``linedraw.py`` library converts bitmap images to vectors.

Installation
------------

Install:

* ``opencv-python-headless``


Using key functions
-------------------

Launch a Python shell, and import ``linedraw`` so you have the functions at your disposal::

    from linedraw import *


Convert an image to lines using ``vectorise()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the ``images`` directory, you'll find an image named ``africa.jpg``. To vectorise it, run::

    lines = vectorise("africa.jpg")

This will generate two things:

* a list of ``lines``, each of which is a list of points
* an SVG file at ``images/africa.jpg.svg``, which will give you an idea of the vectorised representation

You can supply various parameters to ``vectorise()`` to control how it processes the image. For example, a faster
result can be obtained by not hatching the image::

    lines = vectorise("africa.jpg", draw_hatch=False )

See :ref:`vectorise` for more details of the parameters it takes.

``vectorise()`` is useful when you are experimenting with vectorisation values to determine the best parameters
for processing a particular image.


Convert an image to JSON using ``image_to_json()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``image_to_json()`` processes the images as above with ``vectorise()`` (taking the same parameters), and saves the
information as a JSON file to be used by the plotter.

The output file will be saved in ``images`` with a ``.json`` extension.

To plot the file with the plotter (having :ref:`previously set up a plotter instance <get_started>`)::

    bg.plot_file("<file_name>")


Visualise how the plotter will draw the lines using ``draw()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``draw()`` takes a set of lines (as generated by ``vectorise()``) and uses the Python turtle graphics module to draw
them, sequentially. It's fairly slow - but faster than the actual plotter.
